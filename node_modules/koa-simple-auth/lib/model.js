var mongoose = require('mongoose');
var bCrypt = require('bcrypt-nodejs');
var User = require('../');

var userSchema = mongoose.Schema({
  email: {
    type: String,
    trim: true,
    lowercase: true,
    required: 'email address is required',
    unique: true
  },
  passwordhash: {
    type: String,
    required: 'password is required'
  },
  state: {}
});

userSchema.virtual('password').set(function(value) {
  this._password = value;
  this.passwordhash = bCrypt.hashSync(value, bCrypt.genSaltSync(10), null);
});

userSchema.path('passwordhash').validate(function(value) {
  if (this._password) {
    return (this._password.length >= 6 && this._password.length <= 64);
  }
}, "password must be between 6 and 64 characters");

userSchema.methods.validatePassword = function(password) {
  return bCrypt.compareSync(password, this.passwordhash);
};

userSchema.methods.savePromise = function() {
  var self = this;
  return new Promise(function(resolve, revoke) {
    self.save(function(err, item, numberAffected) {
      if (err) return revoke(err);
      resolve(item, numberAffected);
    });
  });
};

module.exports = User.db.model('User', userSchema);